# -*- coding: utf-8 -*-
"""AI_ML_SmartPhone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jwvu1Yzr26-ivZkK6AFjFjgqe9c-6K9J
"""

#Here we import the pandas and the numpy for working with the data set
import numpy as np
import pandas as pd

#here we read the csv file and import data from this
data = pd.read_csv(r"/content/flipkart_smartphones.csv",header='infer')
print(data) #Dispaly the cintent of dataset
print(data.info()) #This is use for the viewing the content on the dataset

#making different copies of our csv file using copy to perform various functions on it and keeping original csv as it is.
data1 = data.copy()
data2 = data.copy()
data3 = data.copy()


print('The number of rows and columns in dataset are ',data.shape)

#using dropna function to delete the coloumns having null entries
data2 = data2.dropna(axis=1)
data3 = data3.dropna(axis=0)
print('The number of rows after NA values in coloumns are ',data2.shape)
print('The number of rows after NA values in rows are ',data3.shape)

#Put the value of mean and mode according to the column
na_color = data1.loc[:,"colour"].mode()[0]
print("The mode of colour column",na_color)
data1.loc[data1["colour"].isna(),"colour"] = na_color

na_memory = np.mean(data1.loc[~data1["memory"].isna(),"memory"])
print("The mean of memory column",na_memory)
data1.loc[data1["memory"].isna(),"memory"] = na_memory

na_storage = np.mean(data1.loc[~data1["storage"].isna(),"storage"])
print("The mean of storage column",na_storage)
data1.loc[data1["storage"].isna(),"storage"] = na_storage

na_processor = data1.loc[:,"processor"].mode()[0]
print("The mode of processor column",na_processor)
data1.loc[data1["processor"].isna(),"processor"] = na_processor

na_front_camera = data1.loc[:,"front_camera"].mode()[0]
print("The mode of front camera column",na_front_camera)
data1.loc[data1["front_camera"].isna(),"front_camera"] = na_front_camera

na_battery_capacity = np.mean(data1.loc[~data1["battery_capacity"].isna(),"battery_capacity"])
print("The mean of battery capacity column",na_battery_capacity)
data1.loc[data1["battery_capacity"].isna(),"battery_capacity"] = na_battery_capacity

na_battery_type = data1.loc[:,"battery_type"].mode()[0]
print("The mode of battery type column",na_battery_type)
data1.loc[data1["battery_type"].isna(),"battery_type"] = na_battery_type

print(data1.info())
print(data1)

#Here describe() use for the knowing the statistial value of each numerical column like ,count,mean,standard deviaton,minimum,maximum etc...
print("Stastical value of each column")
print(data1.describe())

#For printing the statistics value i used the for loop for the short code
import statistics as st
column = ['original_price', 'discounted_price', 'ratings', 'rating_count', 'reviews', 'memory', 'storage', 'display_size', 'battery_capacity']
for i in column:
    mode = st.mode(data1[i])
    sum = np.sum(data1[i])
    median = np.median(data1[i])
    variance = np.var(data[i])
    range = np.max(data[i]) - np.min(data[i])
    print("Statistial Value For Column :",i)
    print("Mode :", mode)
    print("Sum :", sum)
    print("Median :", median)
    print("Variance :", variance)
    print("Range :", range)

#hare we print the unique value and length of each column
unique_brand = data1.loc[:,"brand"].unique()
print("Unique Value For Brand Column :",unique_brand)
print("Length Of Unique Value :",len(unique_brand))

unique_model = data1.loc[:,"model"].unique()
print("Unique Value For Model Column :",unique_model)
print("Length Of Unique Value :",len(unique_model))

unique_original_price = data1.loc[:,"original_price"].unique()
print("Unique Value For Original Price Column :",unique_original_price)
print("Length Of Unique Value :",len(unique_original_price))

unique_discounted_price = data1.loc[:,"discounted_price"].unique()
print("Unique Value For Discount Price Column :",unique_discounted_price)
print("Length Of Unique Value :",len(unique_discounted_price))

unique_ratings = data1.loc[:,"ratings"].unique()
print("Unique Value For Ratings Column :",unique_ratings)
print("Length Of Unique Value :",len(unique_ratings))

unique_rating_count = data1.loc[:,"rating_count"].unique()
print("Unique Value For Rating Count Column :",unique_rating_count)
print("Length Of Unique Value :",len(unique_rating_count))

unique_reviews = data1.loc[:,"reviews"].unique()
print("Unique Value For Review Column :",unique_reviews)
print("Length Of Unique Value :",len(unique_reviews))

unique_memory = data1.loc[:,"memory"].unique()
print("Unique Value For Memory Column :",unique_memory)
print("Length Of Unique Value :",len(unique_memory))

unique_storage = data1.loc[:,"storage"].unique()
print("Unique Value For Storage Column :",unique_storage)
print("Length Of Unique Value :",len(unique_storage))

unique_processor = data1.loc[:,"processor"].unique()
print("Unique Value For Processor Column :",unique_processor)
print("Length Of Unique Value :",len(unique_processor))

unique_rear_camera = data1.loc[:,"rear_camera"].unique()
print("Unique Value For Rear Camera Column :",unique_rear_camera)
print("Length Of Unique Value :",len(unique_rear_camera))

unique_front_camera = data1.loc[:,"front_camera"].unique()
print("Unique Value For Front Camera Column :",unique_front_camera)
print("Length Of Unique Value :",len(unique_front_camera))

unique_display_size = data1.loc[:,"display_size"].unique()
print("Unique Value For Display Size Column :",unique_display_size)
print("Length Of Unique Value :",len(unique_display_size))

unique_battery_capacity = data1.loc[:,"battery_capacity"].unique()
print("Unique Value For Battery Capacity Column :",unique_battery_capacity)
print("Length Of Unique Value :",len(unique_battery_capacity))

unique_battery_type = data1.loc[:,"battery_type"].unique()
print("Unique Value For Battery Type Column :",unique_battery_type)
print("Length Of Unique Value :",len(unique_battery_type))

#For plot graph we import the library of matplotlib
import matplotlib.pyplot as plt
plt.title('Smart Phone Data Analyze')
#here we used the subplot method
plt.subplot(4,2,1)
plt.plot([data1["discounted_price"]],[data1["original_price"]],marker='o',markersize=1)
plt.title('Original Price')

plt.subplot(4,2,2)
plt.plot([data1["discounted_price"]],[data1["ratings"]],marker='o',markersize=1)
plt.title('Ratings')

plt.subplot(4,2,3)
plt.plot([data1["discounted_price"]],[data1["rating_count"]],marker='o',markersize=1)
plt.title('Rating Count')

plt.subplot(4,2,4)
plt.plot([data1["discounted_price"]],[data1["reviews"]],marker='o',markersize=1)
plt.title('Reviews')

plt.subplot(4,2,5)
plt.plot([data1["discounted_price"]],[data1["memory"]],marker='o',markersize=1)
plt.title('Memory')

plt.subplot(4,2,6)
plt.plot([data1["discounted_price"]],[data1["storage"]],marker='o',markersize=1)
plt.title('Storage')

plt.subplot(4,2,7)
plt.plot([data1["discounted_price"]],[data1["display_size"]],marker='o',markersize=1)
plt.title('Display Size')

plt.subplot(4,2,8)
plt.scatter([data1["discounted_price"]],[data1["battery_capacity"]])
plt.title('Battery Capacity')

plt.subplots_adjust(hspace=0.5)
plt.grid()
plt.show()

#here we plot the histogram of Discount price
plt.hist(data1['discounted_price'],color='k')
plt.ylabel("No of Smartphones")
plt.xlabel("Discount Price")

#here we plot the pie chart of Battery Type
maritial = data1["battery_type"].value_counts()

label = maritial.index
counts = maritial.values
colors = ['gold','lightgreen','blue']
plt.title('Battery Type Analysis')

plt.pie(counts, labels = label, startangle = 90,shadow=True, colors=colors)
plt.show()

#Here first we done the trainig  & testing and then we apply the classification
#Here we classify the Batttery type
from sklearn.model_selection import train_test_split
selected_columns = ['original_price', 'discounted_price', 'ratings', 'rating_count', 'reviews', 'memory','display_size']

X = data1[selected_columns].astype(float)
Y = data1['battery_capacity']

X = X.values.tolist()
X = np.array(X,dtype=float)
Y = np.array(Y,dtype=int)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2)
from sklearn.metrics import accuracy_score,classification_report
from sklearn.neighbors import KNeighborsClassifier

k = int(input("Enter the number of nearest neighbors to be used, i.e. k :"))

model = KNeighborsClassifier(n_neighbors=k, weights='distance')

model.fit(X_train,Y_train)

pred = model.predict(X_test)

accuracy = accuracy_score(Y_test,pred)
cr=classification_report(Y_test,pred)
plt.scatter(['Accuracy'],[cr],label='Accuracy')
plt.scatter(['Precision'],[cr],label='Precision')
plt.scatter(['Recall'],[cr],label='Recall')
plt.scatter(['F1-Score'],[cr],label='F1-score')

print("Accuracy : ",accuracy)
print(classification_report(Y_test,pred))

#here we do the regrasssion of battery capacity
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_absolute_error ,mean_squared_error


selected_columns = ['original_price', 'discounted_price', 'ratings', 'rating_count', 'reviews', 'memory','battery_capacity']

X = data1[selected_columns].astype(float)
Y = data1['display_size']

X = X.values.tolist()
X = np.array(X,dtype=float)
Y = np.array(Y,dtype=float)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2)

model = KNeighborsRegressor(n_neighbors=k, weights='distance')

model.fit(X_train,Y_train)

pred = model.predict(X_test)

mae = mean_absolute_error(Y_test,pred)
mse = mean_squared_error(Y_test,pred)
rmse = np.sqrt(mse)

plt.plot(['mae'],[mae],marker='o',markersize=8,label='MAE')
plt.plot(['mse'],[mse],marker='o',markersize=8,label='MSE')
plt.plot(['rmse'],[rmse],marker='o',markersize=8,label='RMSE')

print("Using Sklearn:")
print("Mean Absolute Error (MAE) :",mae)
print("Mean Squared Error (MSE) :",mse)
print("Root Mean Squared Error (RMSE) :",mae)